import copy 
class DFSAgent:
    def __init__(self, colors, adjacency):
        self.colors = colors
        self.adjacency = adjacency
        self.state = {}
        self.iters = 0

    def valid_coloring(self, state, new_node=None):
        for node in state if new_node is None else [new_node]:
            for neighbor in self.adjacency[node]:
                if neighbor in state and state[node] == state[neighbor]:
                    return False
        return True

    def next_states(self, state):
        return (
            new_state
            for node in self.adjacency if node not in state
            for color in self.colors
            if self.valid_coloring(new_state := {**state, node: color}, new_node=node)
        )
        #for node in self.adjacency:
        #    if node not in state:
        #        for color in self.colors:
        #            new_state = state.copy()
        #            new_state[node] = color
        #            if self.valid_coloring(new_state):
        #                yield new_state

    def dfs(self):
        self.iters += 1
        if len(self.state) == len(self.adjacency):
            print(self.iters)
            yield self.state
        for new_state in self.next_states(self.state):
            self.state = new_state
            yield from self.dfs()

from itertools import chain
class DFSAgentIterative(DFSAgent):
    def __init__(self, colors, adjacency):
        super().__init__(colors, adjacency)
        self.frontier = (s for s in [{}])

    def dfs(self):
        while (state := next(self.frontier),None)!= None:
            if len(state) == len(self.adjacency):
                yield state
            self.frontier = chain.from_iterable([self.next_states(state), self.frontier])

class DFSAgentIterative2(DFSAgent):
    def __init__(self, colors, adjacency):
        super().__init__(colors, adjacency)
        self.frontier = [{}, None]

    def dfs(self):
        while (state := self.frontier.pop(0))!= None:
            if len(state) == len(self.adjacency):
                print(self.generated_states)
                yield state
            self.frontier[0:0] = list(self.next_states(state)) 

class DFSAgentOptim(DFSAgent):
    def __init__(self, colors, adjacency, mrw=True, lcv=True, fwc=True):
        super().__init__(colors, adjacency)
        self.fwc, self.lcv, self.mrw = fwc, lcv, mrw

    def legal_values(self, state, node):
        return len(self.colors) - len({state[neighbor] for neighbor in self.adjacency[node] if neighbor in state})

    def forward_checking(self, state):
        if  not self.fwc :
            return True
        else:
            return all(self.legal_values(state, node) > 0 for node in self.adjacency if node not in state)

    def MCV(self, state):
        if not self.mrw:
            return [n for n in self.adjacency if n not in state][0]
        else:
            unassigned_variables = [n for n in self.adjacency if n not in state]
            return min(unassigned_variables, key=lambda n:self.legal_values(state, n))
            """
            m = unassigned_variables[0]
            for n in unassigned_variables[1:]:
                if self.legal_values(state, n) < self.legal_values(state,m):
                    m=n
            return n
            """
            

    def removed_neighbors_colors(self, state, node, color):
        neighbors = [ n for n in self.adjacency[node] if n not in state]
        current_values = sum(self.legal_values(state, n) for n in neighbors)
        future_state = copy.deepcopy(state)
        future_state[node]=color
        future_values =  sum(self.legal_values(future_state, n) for n in neighbors)
        return current_values - future_values

    def LCV_sort(self, state, node):
        if not self.lcv:
            return self.colors
        else:
            return sorted(self.colors, key=lambda c:self.removed_neighbors_colors(state,node,c))

    def next_states(self, state):
        node = self.MCV(state)
        return ( new_state 
                for color in self.LCV_sort(state, node)
                if self.valid_coloring(new_state := {**state, node: color}, new_node=node) and self.forward_checking(new_state))
        """
        for color in self.LCV_sort(state, node):
            new_state = {**state, node:color}
            if self.valid_coloring(state, new_node=node) and self.forward_checking(new_state):
                yield new_state
        """

class DFSAgentDomain():
    def __init__(self, colors, adjacency):
        self.colors = colors
        self.adjacency = adjacency
        self.state = {n:[None,colors.copy()] for n in adjacency}
        self.iters = 0

    def valid_coloring(self, state, new_node=None):
        for node in state if new_node is None else [new_node]:
            for neighbor in self.adjacency[node]:
                if state[neighbor][0] is not None and state[node][0] == state[neighbor][0]:
                    return False
        return True

    def color_node(self, state, node, color):
        new_state = copy.deepcopy(state)
        new_state[node][0]=color
        return new_state

    def next_states(self, state):
        for node in self.adjacency:
            if state[node][0] is None:
                for color in state[node][1]:
                    new_state = self.color_node(state, node, color)
                    if self.valid_coloring(new_state, new_node=node):
                        yield new_state

    def dfs(self):
        self.iters += 1
        if all(x[0] is not None for x in self.state.values()):
            print(self.iters)
            yield self.state
        for new_state in self.next_states(self.state):
            self.state = new_state
            yield from self.dfs()

class DFSAgentDomain2(DFSAgentDomain):
    def color_node(self, state, node, color):
        new_state = super().color_node(state, node, color)
        for n in self.adjacency[node]:
            if color in new_state[n][1]:
                new_state[n][1].remove(color)
        return new_state

    def valid_coloring(self, state, new_node=None):
        if new_node is not None:
            return state[new_node][0] in state[new_node][1] 
        else:
            return all((state[node][0] in state[node][1]) for node in state if state[node][0] is not None)



if __name__ == "__main__":
    adjacency = {'A': ['B','G','F'],
                'B': ['A','C'],
                'C': ['B','D','F','E'],
                'D': ['C'],
                'E': ['C'],
                'F': ['A','C','G'],
                'G': ['A','F']}

    #make a much larger graph
    adjacency2 = {
        1: [2, 4, 11, 13],
        2: [1, 3, 10, 12],
        3: [2, 6, 8, 11],
        4: [1, 5, 8, 10, 14],
        5: [4, 7, 9, 13],
        6: [3, 7, 9, 12],
        7: [5, 6, 8, 9, 14],
        8: [3, 4, 7, 9, 12, 13],
        9: [5, 6, 7, 8, 14],
        10: [2, 4],
        11: [1, 3],
        12: [2, 6, 8],
        13: [1, 5, 8],
        14: [4, 7, 9],
    }

    adjacency3 = {
        1: [2, 4, 11, 13],
        2: [1, 3, 10, 12],
        3: [2, 6, 8, 11, 15, 17],
        4: [1, 5, 8, 10, 14, 17],
        5: [4, 7, 9, 13, 16, 18],
        6: [3, 7, 9, 12, 16, 18],
        7: [5, 6, 8, 9, 14, 15, 17, 18],
        8: [3, 4, 7, 9, 12, 13, 16, 18],
        9: [5, 6, 7, 8, 14, 15, 16, 17],
        10: [2, 4, 20, 22, 29],
        11: [1, 3, 19, 21, 29],
        12: [2, 6, 8, 20, 24, 26, 29],
        13: [1, 5, 8, 19, 23, 26, 29],
        14: [4, 7, 9, 22, 25, 27, 29],
        15: [3, 7, 9, 21, 25, 27, 29],
        16: [5, 6, 8, 9, 23, 24, 26, 27, 29],
        17: [3, 4, 7, 9, 21, 22, 25, 27, 29],
        18: [5, 6, 7, 8, 23, 24, 25, 26, 29],
        19: [11, 13, 28, 30],
        20: [10, 12, 28, 30],
        21: [11, 15, 17, 28, 30],
        22: [10, 14, 17, 28, 30],
        23: [13, 16, 18, 28, 30],
        24: [12, 16, 18, 28, 30],
        25: [14, 15, 17, 18, 28, 30],
        26: [12, 13, 16, 18, 28, 30],
        27: [14, 15, 16, 17, 28, 30],
        28: [19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30],
        29: [10, 11, 12, 13, 14, 15, 16, 17, 18, 28, 30],
        30: [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]
    }

    adjacency4 = {0: [286, 183, 173, 246, 3, 128], 1: [4, 167, 298, 12], 2: [108, 143, 249, 109, 75, 217], 3: [228, 90, 246, 73, 286, 0], 4: [1, 167, 218, 213, 12, 207], 5: [49, 297, 295, 92], 6: [21, 34, 78, 138, 240, 158, 201, 270], 7: [180, 44, 84, 250], 8: [194, 137, 68, 176, 96, 264, 144, 104], 9: [159, 89, 111, 112], 10: [295, 19, 49, 102, 190, 156, 166], 11: [203, 155, 262, 114, 299, 296], 12: [163, 165, 86, 1, 4, 298, 41, 207], 13: [204, 231, 52, 205], 14: [153, 88, 138, 220, 78, 262], 15: [234, 204, 205, 231, 168, 129], 16: [206, 31, 164, 83], 17: [182, 235, 263, 127, 186, 257, 161], 18: [96, 116, 264, 207, 135], 19: [49, 297, 10, 197, 222, 166], 20: [134, 279, 92, 132, 145, 36], 21: [46, 6, 67, 34, 78], 22: [97, 149, 191, 33, 224], 23: [116, 33, 122, 214], 24: [283, 199, 44, 134, 92], 25: [193, 35, 175, 139, 37], 26: [191, 121, 102, 224, 223, 187], 27: [230, 288, 161, 60, 146, 86], 28: [80, 172, 265, 258, 269, 56, 249], 29: [45, 117, 196, 219, 79, 147, 94], 30: [127, 272, 152, 162], 31: [251, 16, 206, 83, 248], 32: [119, 58, 154, 256, 118, 280, 89, 229, 65], 33: [97, 22, 23, 149, 164, 244, 122, 214, 41], 34: [46, 21, 6, 278, 39, 100, 201], 35: [193, 25, 253, 271, 139, 82, 55], 36: [57, 107, 239, 135, 279, 198, 20, 145], 37: [67, 175, 25, 78, 139, 294, 281], 38: [290, 53, 69, 248], 39: [278, 219, 117, 100, 34], 40: [170, 101, 188, 254, 177, 269], 41: [214, 69, 206, 165, 12, 207, 164, 33], 42: [128, 189, 156, 293, 275, 52, 231, 173, 252], 43: [186, 298, 146, 161, 167, 237], 44: [7, 283, 180, 24, 250, 199], 45: [29, 196, 133, 94], 46: [21, 67, 34, 175, 278], 47: [182, 160, 272, 235, 127], 48: [112, 70, 230, 115, 101, 254, 288], 49: [5, 295, 297, 19, 10], 50: [65, 118, 154, 242, 158], 51: [266, 93, 62, 259, 63, 125, 157, 131], 52: [13, 189, 64, 231, 205, 259, 266, 42], 53: [38, 290, 248, 165, 60, 188], 54: [255, 282, 104, 291, 145], 55: [136, 292, 192, 253, 221, 82, 35], 56: [81, 276, 232, 258, 28, 120, 241, 249], 57: [239, 36, 267, 135, 244], 58: [119, 154, 296, 32, 151], 59: [246, 90, 192, 169, 136, 202, 200], 60: [254, 188, 53, 86, 230, 165, 27], 61: [247, 269, 258, 111, 112, 101], 62: [93, 51, 179, 195, 273, 131], 63: [125, 259, 51, 238], 64: [238, 110, 52, 189, 259], 65: [50, 118, 32, 105], 66: [99, 192, 110, 202, 211, 189], 67: [175, 46, 21, 37, 78], 68: [194, 137, 208, 8, 227, 126, 95, 104], 69: [290, 38, 206, 248, 41, 165], 70: [115, 105, 178, 48, 288], 71: [79, 196, 98, 226, 292, 238, 103], 72: [114, 210, 120, 262, 294], 73: [187, 286, 83, 3, 228], 74: [185, 184, 263, 126, 227, 95], 75: [143, 140, 109, 106, 91, 2, 225], 76: [257, 288, 161, 274, 178], 77: [150, 225, 284, 143, 251], 78: [14, 138, 37, 67, 262, 294, 6, 21], 79: [147, 196, 71, 29, 253, 292], 80: [124, 28, 172, 284, 249], 81: [233, 56, 174, 232, 120], 82: [142, 221, 243, 139, 35, 55], 83: [123, 223, 164, 187, 16, 31, 73, 251, 228], 84: [215, 250, 180, 7], 85: [113, 236, 131, 273, 157], 86: [163, 12, 165, 146, 298, 60, 27], 87: [216, 299, 256, 229], 88: [153, 14, 138, 240], 89: [280, 9, 111, 32], 90: [169, 228, 3, 59, 246, 225], 91: [106, 200, 169, 75, 140], 92: [199, 134, 24, 20, 279, 5, 297, 222, 295], 93: [62, 179, 51, 205, 266], 94: [100, 219, 45, 29, 201, 133], 95: [160, 285, 185, 235, 74, 126, 68, 104], 96: [18, 264, 207, 213, 8, 176], 97: [22, 191, 33, 123, 164, 223], 98: [125, 226, 71, 238, 157], 99: [66, 192, 110, 103, 292], 100: [94, 219, 39, 201, 34], 101: [254, 40, 269, 48, 112, 61], 102: [224, 26, 190, 121, 261, 295, 10], 103: [110, 238, 292, 99, 71], 104: [255, 54, 291, 144, 8, 180, 68, 95], 105: [70, 115, 178, 141, 159, 277, 65], 106: [91, 169, 75, 225], 107: [130, 36, 198, 145], 108: [2, 143, 249, 284], 109: [142, 243, 75, 221, 140, 217, 2], 110: [103, 238, 64, 99, 66, 189], 111: [260, 229, 280, 9, 89, 112, 61, 247], 112: [48, 111, 159, 101, 9, 61, 115], 113: [85, 273, 236, 245, 195], 114: [72, 120, 233, 299, 11, 262], 115: [70, 105, 159, 48, 112], 116: [18, 23, 214, 207, 122, 135], 117: [29, 219, 147, 39, 278], 118: [154, 65, 50, 32], 119: [58, 296, 256, 32], 120: [241, 210, 72, 114, 81, 233, 56], 121: [289, 26, 190, 252, 102, 187], 122: [244, 135, 23, 33, 116], 123: [223, 164, 83, 97], 124: [80, 172, 284, 150], 125: [63, 98, 238, 51, 157], 126: [227, 74, 68, 95], 127: [30, 272, 47, 182, 17, 162, 257], 128: [211, 42, 183, 189, 0, 173], 129: [293, 168, 275, 166, 15, 234, 179, 197, 195], 130: [107, 282, 198, 145], 131: [273, 157, 85, 62, 51], 132: [145, 291, 134, 20, 283, 180], 133: [171, 226, 45, 196, 201, 94, 236], 134: [20, 24, 92, 132, 283], 135: [198, 122, 244, 57, 36, 264, 18, 116], 136: [55, 192, 59, 200, 221], 137: [208, 194, 176, 68, 8], 138: [240, 88, 14, 78, 6], 139: [148, 25, 243, 281, 35, 82, 37], 140: [221, 75, 109, 91, 200], 141: [287, 274, 178, 277, 105], 142: [243, 82, 221, 109], 143: [2, 108, 75, 284, 225, 77], 144: [264, 198, 282, 255, 104, 8], 145: [291, 132, 54, 282, 130, 107, 20, 36], 146: [298, 86, 43, 161, 27], 147: [271, 79, 117, 253, 29, 278], 148: [281, 217, 243, 139, 210], 149: [244, 22, 33, 267, 224], 150: [77, 248, 284, 251, 124, 172], 151: [268, 242, 212, 155, 296, 58, 154], 152: [285, 272, 30, 162], 153: [88, 14, 220, 240, 212, 158], 154: [118, 58, 50, 32, 242, 151], 155: [203, 11, 212, 151, 296], 156: [275, 166, 252, 42, 190, 10], 157: [131, 85, 236, 226, 171, 51, 98, 125], 158: [268, 212, 242, 240, 153, 50, 6, 270], 159: [9, 115, 112, 105], 160: [285, 47, 272, 95, 235], 161: [76, 257, 43, 288, 146, 27, 186, 17], 162: [277, 30, 127, 152, 257], 163: [12, 165, 86], 164: [123, 83, 16, 33, 97, 206, 41], 165: [163, 12, 86, 290, 53, 69, 41, 60], 166: [275, 156, 197, 129, 19, 10], 167: [1, 4, 218, 298, 237, 43], 168: [293, 231, 129, 15], 169: [200, 90, 91, 106, 59, 225], 170: [40, 188, 209, 177], 171: [133, 226, 157, 236], 172: [265, 209, 188, 124, 80, 28, 150, 248], 173: [289, 252, 0, 286, 42, 128], 174: [216, 233, 81, 232, 260], 175: [67, 46, 37, 25, 193, 278], 176: [208, 137, 237, 218, 213, 181, 8, 96], 177: [265, 269, 209, 170, 40], 178: [274, 141, 76, 105, 70, 288], 179: [234, 93, 62, 205, 195, 129], 180: [7, 84, 44, 283, 132, 291, 104], 181: [227, 237, 208, 176, 184, 186], 182: [47, 235, 17, 127], 183: [202, 211, 128, 246, 0], 184: [263, 186, 74, 181, 227], 185: [235, 74, 263, 95], 186: [43, 263, 184, 17, 161, 181, 237], 187: [223, 73, 83, 286, 289, 26, 121], 188: [209, 170, 40, 172, 254, 60, 53, 248], 189: [211, 52, 64, 128, 110, 66, 42], 190: [252, 121, 102, 156, 10], 191: [26, 22, 97, 224, 223], 192: [99, 66, 136, 55, 59, 202, 292], 193: [25, 35, 271, 175, 278], 194: [8, 68, 137], 195: [273, 113, 62, 245, 179, 129, 215], 196: [45, 29, 79, 71, 226, 133], 197: [19, 222, 166, 250, 129, 215], 198: [135, 144, 264, 107, 130, 36, 282], 199: [24, 92, 222, 44, 250], 200: [169, 91, 140, 59, 136, 221], 201: [94, 270, 133, 100, 236, 34, 6], 202: [183, 246, 66, 211, 192, 59], 203: [11, 155, 212, 220, 262], 204: [13, 231, 205, 15], 205: [204, 13, 266, 15, 234, 93, 179, 52], 206: [16, 31, 69, 248, 164, 41], 207: [213, 214, 116, 4, 18, 96, 41, 12], 208: [137, 176, 68, 181, 227], 209: [188, 170, 177, 172, 265], 210: [120, 72, 241, 281, 148, 217, 294], 211: [128, 189, 183, 202, 66], 212: [268, 151, 203, 155, 220, 158, 153], 213: [207, 218, 4, 176, 96], 214: [41, 23, 116, 207, 33], 215: [84, 250, 197, 195], 216: [87, 174, 299, 233, 260, 229], 217: [148, 243, 109, 2, 241, 210, 249], 218: [237, 4, 213, 167, 176], 219: [100, 117, 39, 94, 29], 220: [153, 14, 212, 203, 262], 221: [140, 82, 142, 109, 200, 136, 55], 222: [297, 199, 19, 197, 92, 250], 223: [187, 123, 83, 97, 191, 26], 224: [102, 267, 26, 191, 261, 149, 22], 225: [77, 106, 169, 90, 143, 75, 228, 251], 226: [171, 133, 98, 196, 71, 157], 227: [126, 181, 68, 208, 74, 184], 228: [3, 90, 73, 225, 83, 251], 229: [260, 280, 111, 216, 87, 256, 32], 230: [27, 288, 254, 48, 60], 231: [13, 204, 168, 52, 15, 293, 42], 232: [276, 174, 56, 81, 247, 260], 233: [81, 174, 216, 299, 114, 120], 234: [15, 179, 205, 129], 235: [182, 185, 17, 47, 160, 263, 95], 236: [85, 113, 245, 270, 157, 171, 133, 201], 237: [218, 176, 181, 167, 43, 186], 238: [64, 103, 110, 259, 63, 125, 98, 71], 239: [261, 57, 267, 36, 279], 240: [138, 88, 153, 158, 6], 241: [120, 210, 249, 56, 217], 242: [268, 151, 158, 50, 154], 243: [142, 82, 217, 109, 148, 139], 244: [122, 149, 135, 33, 267, 57], 245: [236, 113, 270, 195], 246: [59, 3, 202, 90, 183, 0], 247: [61, 258, 276, 232, 260, 111], 248: [38, 53, 69, 150, 206, 251, 31, 188, 172], 249: [108, 241, 2, 56, 284, 80, 28, 217], 250: [84, 215, 7, 44, 199, 222, 197], 251: [31, 83, 248, 150, 77, 228, 225], 252: [173, 289, 190, 121, 156, 42], 253: [271, 147, 35, 79, 292, 55], 254: [101, 40, 188, 60, 230, 48], 255: [54, 282, 104, 144], 256: [87, 296, 299, 119, 32, 229], 257: [76, 274, 287, 161, 277, 162, 127, 17], 258: [276, 247, 28, 56, 61, 269], 259: [266, 63, 51, 238, 64, 52], 260: [229, 111, 247, 232, 174, 216], 261: [239, 267, 279, 224, 102, 295], 262: [294, 220, 14, 78, 11, 203, 72, 114], 263: [184, 186, 17, 235, 185, 74], 264: [144, 96, 18, 198, 135, 8], 265: [172, 177, 269, 209, 28], 266: [259, 51, 205, 93, 52], 267: [224, 261, 239, 57, 149, 244], 268: [151, 242, 212, 158], 269: [177, 265, 61, 40, 28, 258, 101], 270: [245, 236, 201, 6, 158], 271: [253, 147, 193, 35, 278], 272: [152, 30, 127, 285, 47, 160], 273: [131, 113, 85, 195, 62], 274: [141, 287, 178, 257, 76], 275: [156, 166, 129, 293, 42], 276: [258, 232, 56, 247], 277: [162, 287, 141, 257, 105], 278: [39, 175, 193, 117, 46, 271, 34, 147], 279: [20, 261, 239, 92, 36], 280: [89, 229, 111, 32], 281: [148, 294, 139, 210, 37], 282: [54, 255, 130, 145, 198, 144], 283: [44, 24, 180, 134, 132], 284: [143, 108, 77, 150, 124, 80, 249], 285: [152, 160, 272, 95], 286: [0, 73, 187, 173, 289, 3], 287: [141, 274, 277, 257], 288: [27, 76, 230, 161, 178, 70, 48], 289: [173, 252, 121, 286, 187], 290: [38, 53, 69, 165], 291: [145, 132, 54, 104, 180], 292: [55, 103, 192, 99, 71, 253, 79], 293: [168, 129, 231, 275, 42], 294: [262, 281, 78, 37, 210, 72], 295: [49, 5, 10, 92, 102, 261], 296: [119, 256, 58, 155, 299, 11, 151], 297: [5, 49, 19, 222, 92], 298: [146, 167, 1, 43, 86, 12], 299: [87, 216, 233, 256, 114, 296, 11]}

    adjacency5 = {0: [210, 17, 238, 196, 287, 103], 1: [156, 362, 330, 397, 121, 18], 2: [9, 202, 48, 158, 384], 3: [235, 226, 42, 376, 267, 265], 4: [91, 377, 7, 361, 205, 349], 5: [342, 366, 12, 81, 170, 324, 276], 6: [47, 220, 322, 332], 7: [217, 154, 361, 254, 232, 91, 4], 8: [343, 16, 66, 208], 9: [2, 202, 158, 39, 115, 204, 155], 10: [225, 111, 290, 383, 251, 343], 11: [272, 169, 365, 160, 141, 293], 12: [366, 5, 58, 327, 81, 152, 270], 13: [186, 346, 107, 99], 14: [22, 168, 312, 50, 34], 15: [113, 167, 312, 269, 135, 34], 16: [8, 343, 66, 342, 60, 81], 17: [238, 384, 224, 202, 115, 308, 210, 0], 18: [137, 344, 121, 35, 156, 1], 19: [293, 363, 365, 59], 20: [139, 146, 215, 247, 222], 21: [191, 120, 219, 345, 107], 22: [14, 78, 168, 51, 312], 23: [325, 374, 175, 252, 331, 223], 24: [123, 353, 270, 206], 25: [79, 164, 246, 166, 82], 26: [348, 258, 375, 90], 27: [175, 63, 38, 153, 69, 331], 28: [77, 216, 44, 147, 333, 376], 29: [349, 145, 102, 149, 263, 91], 30: [351, 94, 260, 54, 322, 47], 31: [118, 398, 321, 229, 203, 350], 32: [379, 133, 250, 242, 201], 33: [57, 288, 329, 143, 386, 286], 34: [50, 303, 14, 150, 312, 15, 174, 135, 277], 35: [53, 98, 237, 344, 75, 18, 137, 253, 282, 62], 36: [122, 171, 203, 74], 37: [51, 189, 167, 390, 249, 228], 38: [200, 187, 175, 27, 63, 325], 39: [9, 174, 204, 115, 314, 364], 40: [334, 144, 121, 275, 136], 41: [130, 106, 99, 393], 42: [179, 3, 226, 235, 371, 85, 200, 73], 43: [120, 150, 345, 303, 100], 44: [199, 164, 154, 77, 217, 28, 246, 216], 45: [309, 230, 180, 109], 46: [199, 392, 246, 159], 47: [6, 54, 322, 332, 240, 30], 48: [158, 2, 384, 224, 193], 49: [164, 217, 254, 79], 50: [116, 34, 14, 168, 303], 51: [22, 312, 37, 78, 167, 189, 106, 309], 52: [239, 126, 177, 316, 157, 315], 53: [98, 288, 35, 355, 328, 75], 54: [240, 47, 30, 122, 351], 55: [314, 308, 364, 196, 210], 56: [62, 182, 245, 274, 162], 57: [33, 370, 341, 143, 288], 58: [368, 268, 327, 12, 270, 185], 59: [222, 363, 365, 19, 86], 60: [145, 149, 66, 236, 16, 81], 61: [241, 93, 183, 76, 111, 71], 62: [56, 367, 282, 245, 162, 173, 35, 98], 63: [153, 187, 27, 38, 264, 179], 64: [228, 249, 227, 250, 69], 65: [339, 389, 195, 299, 72, 257], 66: [8, 16, 60, 149, 208, 232, 254], 67: [274, 83, 162, 291, 185, 270], 68: [315, 302, 163, 285], 69: [27, 142, 323, 153, 64, 227, 331, 228], 70: [165, 88, 330, 207, 185], 71: [294, 76, 93, 61, 324, 261], 72: [360, 389, 297, 148, 65, 257], 73: [192, 273, 92, 325, 200, 380, 85, 42], 74: [338, 387, 351, 122, 36, 295, 171, 261], 75: [237, 355, 275, 395, 53, 35], 76: [261, 241, 61, 71], 77: [28, 336, 154, 147, 44], 78: [168, 188, 393, 22, 106, 51], 79: [25, 164, 49, 208, 254, 166, 251], 80: [392, 320, 371, 264, 159, 262, 356], 81: [342, 236, 152, 60, 16, 5, 12], 82: [220, 322, 243, 332, 166, 246, 159, 148, 25], 83: [291, 270, 123, 67], 84: [283, 255, 195, 227, 244, 190, 360, 212], 85: [140, 160, 380, 226, 42, 73], 86: [178, 231, 394, 59, 222, 365], 87: [213, 211, 151, 259, 162, 291], 88: [70, 165, 397, 185], 89: [286, 140, 141, 160, 226, 386], 90: [357, 310, 354, 301, 316, 221, 258, 201, 26, 375], 91: [232, 4, 7, 349, 149, 29], 92: [374, 132, 325, 192, 73], 93: [61, 183, 324, 71], 94: [260, 30, 161, 234, 322, 243], 95: [311, 317, 96, 340, 378, 279, 155, 110], 96: [340, 272, 311, 95], 97: [369, 129, 373, 317, 273, 104, 305], 98: [53, 128, 288, 173, 35, 62], 99: [41, 130, 13, 186, 393, 233, 346, 359], 100: [345, 43, 196, 364, 150], 101: [113, 390, 223, 252, 278], 102: [206, 349, 29, 263, 291, 377], 103: [289, 326, 287, 193, 318, 0, 247], 104: [132, 305, 352, 374, 273, 97], 105: [362, 397, 121, 144, 138, 247], 106: [393, 41, 78, 130, 309, 51], 107: [346, 219, 21, 13, 303, 120, 186, 116], 108: [185, 209, 218, 207, 367], 109: [313, 163, 285, 359, 180, 45, 230], 110: [155, 158, 304, 95, 279], 111: [10, 290, 284, 183, 241, 61, 276, 343], 112: [118, 198, 257, 240, 321, 332], 113: [15, 101, 167, 278, 269, 390], 114: [136, 395, 293, 363, 386], 115: [314, 308, 202, 9, 39, 17], 116: [50, 186, 168, 303, 107], 117: [177, 239, 316, 301, 184, 300, 258, 359], 118: [31, 112, 398, 321, 240], 119: [271, 347, 292, 221, 248], 120: [21, 345, 43, 303, 107], 121: [334, 137, 18, 1, 40, 362, 105, 144], 122: [36, 240, 203, 398, 54, 74, 351], 123: [24, 270, 206, 291, 83], 124: [385, 180, 285, 381, 379, 242], 125: [299, 283, 255, 339, 194, 307, 176], 126: [157, 52, 316], 127: [396, 170, 268, 294, 324, 368], 128: [288, 173, 98], 129: [373, 169, 97, 369, 391, 311, 272], 130: [41, 233, 106, 99, 230, 309], 131: [231, 178, 318, 394, 215, 247], 132: [104, 192, 92, 374, 273], 133: [32, 250, 227, 255, 176, 201], 134: [256, 211, 147, 267, 336], 135: [277, 269, 15, 34], 136: [395, 114, 275, 363, 40, 144], 137: [18, 334, 121, 35, 237], 138: [144, 319, 146, 247, 363, 105], 139: [20, 146, 247, 319], 140: [85, 89, 160, 226], 141: [386, 160, 89, 11, 293], 142: [356, 153, 323, 69, 262], 143: [341, 265, 57, 286, 33], 144: [138, 40, 121, 363, 136, 105], 145: [60, 149, 236, 29, 263], 146: [139, 20, 319, 222, 138, 363], 147: [333, 267, 134, 336, 77, 28], 148: [212, 297, 360, 72, 332, 296, 159, 82], 149: [145, 60, 66, 29, 232, 91], 150: [43, 303, 100, 174, 364, 34], 151: [256, 211, 205, 399, 87, 291], 152: [236, 81, 263, 12, 270], 153: [356, 63, 142, 264, 27, 69], 154: [361, 7, 217, 336, 77, 44], 155: [110, 298, 181, 378, 204, 158, 95, 9], 156: [1, 330, 372, 358, 218, 344, 18], 157: [126, 354, 316, 52, 201, 302, 315, 381], 158: [48, 2, 9, 110, 155, 193, 304], 159: [262, 296, 46, 80, 392, 246, 148, 82], 160: [380, 169, 141, 140, 85, 89, 11], 161: [234, 94, 243, 383, 166], 162: [259, 173, 87, 56, 62, 274, 67, 291], 163: [359, 68, 315, 184, 109, 285], 164: [49, 217, 79, 25, 44, 246], 165: [330, 70, 88, 397], 166: [251, 243, 161, 383, 25, 82, 79], 167: [312, 15, 113, 51, 37, 390], 168: [188, 78, 393, 22, 14, 116, 50, 186], 169: [129, 373, 380, 160, 11, 272], 170: [396, 127, 324, 366, 5], 171: [280, 382, 203, 36, 172, 74, 261], 172: [335, 214, 280, 171, 375, 261, 294], 173: [128, 259, 162, 288, 98, 370, 62], 174: [39, 150, 364, 204, 34, 277], 175: [38, 27, 325, 23, 331], 176: [248, 201, 194, 292, 125, 133, 255], 177: [117, 52, 239, 316], 178: [86, 231, 394, 131], 179: [187, 371, 42, 200, 63, 264], 180: [385, 124, 285, 109, 45, 189, 309], 181: [298, 266, 378, 155, 269], 182: [388, 245, 56, 274], 183: [284, 276, 93, 324, 111, 61], 184: [163, 315, 359, 239, 117], 185: [108, 209, 207, 70, 274, 88, 67, 270, 58], 186: [13, 116, 107, 168, 393, 99], 187: [200, 38, 63, 179], 188: [393, 168, 78], 189: [309, 37, 51, 385, 180, 242, 249], 190: [244, 323, 212, 296, 262, 84], 191: [21, 345, 219, 196], 192: [132, 273, 73, 92], 193: [304, 289, 103, 318, 224, 48, 158], 194: [307, 229, 248, 125, 176], 195: [299, 389, 283, 65, 84, 360], 196: [100, 364, 345, 191, 55, 219, 210, 346, 0], 197: [265, 341, 370, 213, 211, 267], 198: [257, 332, 112, 297], 199: [46, 246, 392, 44, 320, 216], 200: [187, 38, 179, 325, 73, 42], 201: [354, 157, 176, 90, 292, 32, 379, 221, 133, 381], 202: [2, 9, 384, 115, 17], 203: [398, 171, 382, 36, 122, 31, 350], 204: [298, 277, 39, 155, 174, 9], 205: [256, 399, 377, 151, 4, 336, 361], 206: [102, 263, 353, 24, 123, 291], 207: [372, 218, 70, 330, 108, 185], 208: [79, 343, 8, 66, 251, 254], 209: [245, 388, 108, 185, 367, 274], 210: [0, 308, 55, 196, 17], 211: [151, 87, 213, 134, 256, 197, 267], 212: [360, 148, 190, 296, 84], 213: [87, 211, 370, 197, 259], 214: [172, 335, 271, 347, 357, 375], 215: [247, 20, 222, 231, 131], 216: [28, 320, 235, 44, 371, 376, 199], 217: [7, 49, 154, 254, 164, 44], 218: [372, 358, 207, 156, 108, 367], 219: [21, 191, 107, 346, 196], 220: [6, 82, 322, 332], 221: [292, 310, 271, 119, 90, 201], 222: [59, 215, 20, 363, 146, 86, 231], 223: [278, 374, 352, 101, 23, 252], 224: [238, 384, 17, 287, 326, 289, 48, 193], 225: [10, 383, 251], 226: [3, 42, 286, 140, 265, 85, 89], 227: [64, 255, 84, 133, 250, 69, 244, 323], 228: [64, 249, 331, 390, 37, 69], 229: [307, 194, 321, 350, 248, 31], 230: [45, 233, 309, 313, 130, 109], 231: [86, 178, 131, 222, 215], 232: [91, 254, 7, 149, 66], 233: [130, 230, 99, 313, 359], 234: [161, 337, 281, 260, 94, 383], 235: [3, 376, 216, 42, 371], 236: [152, 145, 60, 81, 263], 237: [75, 275, 35, 334, 137], 238: [224, 17, 287, 0], 239: [52, 177, 117, 184, 315], 240: [54, 398, 118, 112, 122, 47, 332], 241: [61, 290, 76, 111, 261], 242: [249, 250, 385, 124, 32, 379, 189], 243: [322, 161, 166, 94, 82], 244: [323, 190, 84, 227], 245: [388, 182, 209, 56, 62, 367], 246: [199, 46, 44, 25, 164, 159, 82], 247: [215, 20, 139, 319, 131, 138, 318, 103, 105], 248: [194, 229, 292, 176, 119, 350, 347], 249: [242, 250, 228, 64, 189, 37], 250: [249, 242, 133, 32, 64, 227], 251: [166, 225, 10, 383, 208, 79, 343], 252: [331, 101, 390, 23, 223], 253: [344, 358, 282, 35], 254: [49, 217, 232, 7, 79, 208, 66], 255: [283, 84, 125, 227, 133, 176], 256: [205, 134, 151, 211, 336], 257: [198, 112, 65, 339, 321, 297, 72], 258: [300, 26, 301, 348, 90, 117, 359], 259: [162, 173, 370, 213, 87], 260: [94, 337, 30, 234, 351, 306, 387], 261: [76, 295, 241, 290, 71, 294, 74, 171, 172], 262: [296, 159, 190, 80, 323, 356, 142], 263: [206, 29, 102, 152, 145, 236, 353, 270], 264: [356, 153, 63, 80, 179, 371], 265: [197, 341, 143, 267, 286, 226, 3], 266: [378, 181, 305, 269, 278], 267: [376, 333, 147, 134, 265, 197, 211, 3], 268: [327, 396, 58, 127, 368], 269: [135, 277, 278, 113, 15, 298, 181, 266], 270: [24, 123, 353, 83, 263, 67, 152, 12, 185, 58], 271: [119, 221, 310, 214, 357, 347], 272: [96, 340, 311, 11, 129, 169, 365], 273: [192, 73, 132, 104, 97, 373, 380], 274: [67, 182, 388, 56, 209, 162, 185], 275: [395, 136, 237, 75, 40, 334], 276: [284, 183, 324, 111, 5, 343, 342], 277: [135, 269, 204, 298, 174, 34], 278: [223, 269, 352, 113, 101, 305, 266], 279: [304, 394, 95, 110, 340, 318], 280: [382, 171, 335, 172], 281: [234, 383, 337, 306, 290], 282: [367, 253, 62, 358, 35], 283: [255, 84, 299, 195, 125], 284: [183, 276, 111], 285: [180, 109, 124, 68, 302, 163, 381], 286: [89, 143, 226, 265, 33, 386], 287: [326, 103, 238, 224, 0], 288: [128, 98, 53, 33, 173, 57, 328, 370, 329], 289: [326, 103, 224, 193], 290: [241, 111, 10, 383, 281, 261, 295, 306], 291: [83, 123, 399, 377, 151, 206, 102, 87, 67, 162], 292: [221, 119, 248, 176, 201], 293: [19, 114, 363, 365, 11, 141, 386], 294: [71, 127, 324, 261, 368, 172], 295: [306, 261, 338, 290, 74], 296: [262, 159, 190, 212, 148], 297: [148, 72, 198, 332, 257], 298: [181, 204, 155, 277, 269], 299: [125, 195, 283, 339, 65], 300: [258, 301, 117], 301: [316, 300, 258, 117, 90], 302: [68, 315, 285, 381, 157], 303: [150, 43, 120, 107, 50, 34, 116], 304: [279, 193, 110, 318, 158], 305: [352, 104, 266, 278, 378, 97, 317], 306: [387, 338, 337, 281, 295, 260, 290], 307: [194, 321, 339, 229, 125], 308: [314, 115, 55, 210, 17], 309: [45, 230, 189, 106, 130, 180, 51], 310: [357, 221, 271, 90], 311: [391, 96, 317, 272, 95, 129], 312: [167, 15, 51, 14, 22, 34], 313: [109, 359, 230, 233], 314: [115, 308, 55, 364, 39], 315: [68, 302, 163, 184, 239, 52, 157], 316: [126, 301, 157, 52, 177, 117, 354, 90], 317: [391, 369, 311, 97, 95, 378, 305], 318: [131, 193, 103, 394, 304, 279, 247], 319: [146, 139, 138, 247], 320: [392, 80, 216, 199, 371], 321: [31, 307, 118, 229, 257, 112, 339], 322: [243, 220, 6, 94, 47, 82, 30], 323: [244, 190, 142, 69, 262, 227], 324: [170, 183, 276, 93, 127, 71, 294, 5], 325: [23, 92, 374, 175, 38, 73, 200], 326: [287, 289, 103, 224], 327: [268, 396, 366, 58, 12], 328: [355, 329, 386, 53, 288, 395], 329: [328, 386, 33, 288], 330: [165, 70, 372, 156, 207, 1, 397], 331: [252, 23, 390, 228, 175, 27, 69], 332: [198, 297, 112, 47, 6, 220, 148, 240, 82], 333: [147, 376, 267, 28], 334: [137, 40, 121, 237, 275], 335: [172, 214, 280, 347, 382, 350], 336: [77, 361, 154, 147, 134, 256, 205], 337: [234, 281, 260, 306], 338: [387, 306, 74, 295], 339: [65, 307, 299, 125, 257, 321], 340: [96, 272, 95, 365, 279, 394], 341: [143, 265, 197, 57, 370], 342: [81, 16, 5, 343, 276], 343: [8, 16, 208, 342, 276, 251, 111, 10], 344: [253, 358, 18, 156, 35], 345: [120, 191, 21, 43, 100, 196], 346: [13, 107, 219, 99, 196], 347: [350, 119, 271, 335, 248, 214], 348: [26, 258, 375, 359], 349: [29, 102, 91, 4, 377], 350: [347, 229, 382, 248, 335, 203, 31], 351: [30, 260, 387, 74, 54, 122], 352: [305, 104, 223, 374, 278], 353: [24, 270, 206, 263], 354: [157, 201, 316, 90], 355: [328, 75, 53, 395], 356: [153, 264, 142, 80, 262], 357: [310, 271, 90, 214, 375], 358: [253, 218, 344, 282, 367, 156], 359: [163, 184, 109, 313, 233, 117, 99, 258, 348], 360: [72, 212, 389, 148, 195, 84], 361: [154, 7, 336, 4, 205], 362: [105, 1, 397, 121], 363: [19, 59, 222, 293, 114, 146, 136, 138, 144], 364: [55, 100, 314, 196, 150, 174, 39], 365: [19, 59, 293, 11, 272, 340, 86, 394], 366: [327, 396, 170, 5, 12], 367: [282, 62, 358, 245, 209, 218, 108], 368: [58, 268, 127, 294], 369: [391, 317, 97, 129], 370: [57, 213, 197, 341, 173, 259, 288], 371: [179, 320, 80, 264, 235, 42, 216], 372: [218, 207, 330, 156], 373: [129, 169, 380, 97, 273], 374: [92, 223, 132, 104, 352, 325, 23], 375: [348, 26, 357, 90, 214, 172], 376: [333, 267, 235, 3, 28, 216], 377: [399, 205, 4, 349, 291, 102], 378: [266, 181, 155, 317, 305, 95], 379: [32, 381, 124, 242, 201], 380: [373, 169, 160, 85, 273, 73], 381: [379, 124, 285, 302, 201, 157], 382: [280, 171, 203, 350, 335], 383: [281, 225, 234, 161, 10, 290, 251, 166], 384: [17, 224, 48, 202, 2], 385: [124, 180, 242, 189], 386: [329, 328, 141, 33, 89, 286, 395, 114, 293], 387: [338, 306, 351, 74, 260], 388: [245, 182, 209, 274], 389: [65, 72, 360, 195], 390: [101, 252, 167, 37, 331, 113, 228], 391: [369, 317, 311, 129], 392: [46, 320, 80, 199, 159], 393: [188, 168, 106, 78, 41, 186, 99], 394: [178, 86, 279, 131, 365, 318, 340], 395: [136, 275, 114, 75, 355, 328, 386], 396: [170, 127, 268, 327, 366], 397: [105, 362, 165, 330, 1, 88], 398: [31, 118, 203, 240, 122], 399: [377, 205, 151, 291]}


    colors = ['red','green','blue','yellow']
    a = DFSAgent(colors, adjacency)#, mrw=True, fwc=False, lcv=False)

    for state in a.dfs():
        print(state)
        # ask user if they want to continue
        print("Would you like to continue? (Y/n)")
        answer = 'n' #input()
        if answer == 'n':
            break
